/**
 * Quiz Generation Service for K.A.N.A. Backend
 * 
 * This service handles:
 * - Generating educational quizzes based on descriptions/content
 * - Interfacing with Gemini AI for intelligent quiz creation
 * - Providing fallback quiz generation when AI is unavailable
 * - Managing quiz data and responses
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');

class QuizService {
  constructor(googleApiKey) {
    if (googleApiKey) {
      this.genAI = new GoogleGenerativeAI(googleApiKey);
      this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
      console.log('‚úÖ Quiz Service: Gemini AI initialized');
    } else {
      console.warn('‚ö†Ô∏è Quiz Service: No Google API key provided, will use fallback generation only');
    }
  }

  /**
   * Generate a quiz based on description and context
   */
  async generateQuiz(description, options = {}) {
    const {
      numQuestions = 5,
      difficulty = 'medium',
      subject = 'General',
      studentLevel = 'intermediate',
      weaknessAreas = [],
      context = ''
    } = options;

    console.log(`üß† Generating quiz: "${description}" with ${numQuestions} questions`);

    try {
      // Try AI generation first
      if (this.model) {
        const aiQuiz = await this.generateWithAI(description, options);
        if (aiQuiz && aiQuiz.questions.length >= numQuestions) {
          console.log('‚úÖ Quiz generated successfully with AI');
          return aiQuiz;
        }
      }

      // Fallback to template-based generation
      console.log('üîÑ Using fallback quiz generation');
      return this.generateFallbackQuiz(description, options);

    } catch (error) {
      console.error('‚ùå Quiz generation failed:', error);
      // Return fallback quiz on any error
      return this.generateFallbackQuiz(description, options);
    }
  }

  /**
   * Generate quiz using Gemini AI
   */
  async generateWithAI(description, options) {
    const {
      numQuestions = 5,
      difficulty = 'medium',
      subject = 'General',
      studentLevel = 'intermediate',
      weaknessAreas = [],
      context = ''
    } = options;

    const weaknessText = weaknessAreas.length > 0 ? weaknessAreas.join(', ') : 'general understanding';

    const prompt = `
You are K.A.N.A., an educational AI assistant. Create a high-quality educational quiz based on the following requirements:

QUIZ DESCRIPTION: "${description}"
SUBJECT: ${subject}
DIFFICULTY: ${difficulty}
STUDENT LEVEL: ${studentLevel}
WEAKNESS AREAS: ${weaknessText}
ADDITIONAL CONTEXT: ${context}

REQUIREMENTS:
1. Generate EXACTLY ${numQuestions} unique multiple choice questions
2. Each question should have EXACTLY 4 options (A, B, C, D)
3. Make questions educational, engaging, and appropriate for ${studentLevel} level
4. Focus on ${difficulty} difficulty concepts
5. Address the weakness areas: ${weaknessText}
6. Include clear explanations for correct answers
7. Ensure questions test understanding, not just memorization

RESPONSE FORMAT - Return ONLY valid JSON in this exact structure:
{
  "title": "Quiz Title Based on Description",
  "description": "Brief description of what this quiz covers",
  "difficulty": "${difficulty}",
  "subject": "${subject}",
  "questions": [
    {
      "question": "Question text here?",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correctAnswer": 0,
      "explanation": "Clear explanation of why this answer is correct",
      "topic": "Specific topic this question covers",
      "weaknessArea": "Which weakness area this addresses"
    }
  ]
}

Generate the quiz now:`;

    try {
      const result = await this.model.generateContent(prompt);
      const responseText = result.response.text();

      // Parse the AI response
      return this.parseAIResponse(responseText, options);
    } catch (error) {
      console.error('‚ùå AI generation failed:', error);
      throw error;
    }
  }

  /**
   * Parse AI response into structured quiz data
   */
  parseAIResponse(responseText, options) {
    try {
      // Extract JSON from response
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in AI response');
      }

      const parsedData = JSON.parse(jsonMatch[0]);

      // Validate and structure the quiz
      if (!parsedData.questions || !Array.isArray(parsedData.questions)) {
        throw new Error('Invalid question format in AI response');
      }

      const quiz = {
        id: `quiz_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        title: parsedData.title || `Quiz: ${options.subject || 'General'}`,
        description: parsedData.description || 'Educational quiz generated by K.A.N.A.',
        difficulty: parsedData.difficulty || options.difficulty || 'medium',
        subject: parsedData.subject || options.subject || 'General',
        questions: [],
        generatedBy: 'kana_ai',
        createdAt: new Date().toISOString(),
        maxAttempts: 3,
        timeLimitMinutes: Math.max(5, parsedData.questions.length * 2) // 2 min per question
      };

      // Process questions
      parsedData.questions.forEach((q, index) => {
        if (q.question && q.options && Array.isArray(q.options) && q.options.length === 4) {
          quiz.questions.push({
            id: `q_${Date.now()}_${index}`,
            question: q.question,
            options: q.options,
            correctAnswer: q.correctAnswer || 0,
            explanation: q.explanation || 'Correct answer explanation',
            topic: q.topic || options.subject || 'General',
            weaknessArea: q.weaknessArea || options.weaknessAreas[0] || 'General Understanding',
            difficulty: quiz.difficulty
          });
        }
      });

      return quiz;
    } catch (error) {
      console.error('‚ùå Failed to parse AI response:', error);
      throw error;
    }
  }

  /**
   * Generate fallback quiz when AI is unavailable
   */
  generateFallbackQuiz(description, options) {
    const {
      numQuestions = 5,
      difficulty = 'medium',
      subject = 'General',
      weaknessAreas = []
    } = options;

    console.log('üîß Generating fallback quiz');

    const quiz = {
      id: `quiz_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      title: `Study Quiz: ${subject}`,
      description: `Educational quiz based on: "${description}"`,
      difficulty: difficulty,
      subject: subject,
      questions: [],
      generatedBy: 'fallback',
      createdAt: new Date().toISOString(),
      maxAttempts: 3,
      timeLimitMinutes: Math.max(5, numQuestions * 2)
    };

    // Generate fallback questions based on subject and description
    const fallbackTemplates = this.getFallbackQuestions(subject, description, weaknessAreas);

    for (let i = 0; i < Math.min(numQuestions, fallbackTemplates.length); i++) {
      const template = fallbackTemplates[i];
      quiz.questions.push({
        id: `q_${Date.now()}_${i}`,
        question: template.question,
        options: template.options,
        correctAnswer: template.correctAnswer,
        explanation: template.explanation,
        topic: template.topic,
        weaknessArea: template.weaknessArea,
        difficulty: difficulty
      });
    }

    return quiz;
  }

  /**
   * Get fallback question templates
   */
  getFallbackQuestions(subject, description, weaknessAreas) {
    const area1 = weaknessAreas[0] || 'problem solving';
    const area2 = weaknessAreas[1] || 'concept understanding';
    const area3 = weaknessAreas[2] || 'practical application';

    return [
      {
        question: `What is the most effective approach to improve your understanding of ${area1} in ${subject}?`,
        options: [
          `Practice fundamental concepts related to ${area1}`,
          "Focus only on memorizing formulas",
          "Skip the basics and jump to advanced topics",
          "Avoid seeking help or clarification"
        ],
        correctAnswer: 0,
        explanation: `Building a strong foundation in ${area1} requires understanding core concepts before moving to advanced topics.`,
        topic: subject,
        weaknessArea: area1
      },
      {
        question: `When working on ${subject} problems related to ${area2}, which strategy is most beneficial?`,
        options: [
          "Rush through problems quickly",
          "Break complex problems into smaller, manageable parts",
          "Only work on easy problems",
          "Memorize solutions without understanding"
        ],
        correctAnswer: 1,
        explanation: `Breaking complex problems into smaller parts helps you understand the underlying concepts and develop problem-solving skills.`,
        topic: subject,
        weaknessArea: area2
      },
      {
        question: `How can you best apply feedback to improve your performance in ${area3}?`,
        options: [
          "Ignore feedback completely",
          "Read feedback once and forget it",
          "Use feedback to identify specific areas for improvement and practice",
          "Only focus on positive comments"
        ],
        correctAnswer: 2,
        explanation: `Using feedback constructively helps you identify specific weaknesses and focus your study efforts effectively.`,
        topic: subject,
        weaknessArea: area3
      },
      {
        question: `What is the key to mastering challenging concepts in ${subject}?`,
        options: [
          "Cramming the night before tests",
          "Regular practice and consistent review",
          "Avoiding difficult topics",
          "Working in isolation without asking questions"
        ],
        correctAnswer: 1,
        explanation: `Regular practice and consistent review help reinforce learning and build long-term understanding.`,
        topic: subject,
        weaknessArea: weaknessAreas[3] || 'study habits'
      },
      {
        question: `Which approach best supports learning in ${subject}?`,
        options: [
          "Passive reading without active engagement",
          "Active participation, asking questions, and seeking understanding",
          "Memorizing without comprehension",
          "Avoiding challenging material"
        ],
        correctAnswer: 1,
        explanation: `Active engagement and curiosity are essential for deep learning and understanding complex concepts.`,
        topic: subject,
        weaknessArea: weaknessAreas[4] || 'active learning'
      }
    ];
  }

  /**
   * Validate quiz data structure
   */
  validateQuiz(quiz) {
    if (!quiz || typeof quiz !== 'object') {
      return false;
    }

    const requiredFields = ['id', 'title', 'questions'];
    for (const field of requiredFields) {
      if (!quiz[field]) {
        return false;
      }
    }

    if (!Array.isArray(quiz.questions) || quiz.questions.length === 0) {
      return false;
    }

    // Validate each question
    for (const question of quiz.questions) {
      if (!question.question || !Array.isArray(question.options) ||
        question.options.length !== 4 || typeof question.correctAnswer !== 'number') {
        return false;
      }
    }

    return true;
  }

  /**
   * Format quiz for different response types
   */
  formatQuizResponse(quiz, format = 'full') {
    if (!this.validateQuiz(quiz)) {
      throw new Error('Invalid quiz data structure');
    }

    switch (format) {
      case 'summary':
        return {
          id: quiz.id,
          title: quiz.title,
          description: quiz.description,
          questionCount: quiz.questions.length,
          difficulty: quiz.difficulty,
          subject: quiz.subject,
          generatedBy: quiz.generatedBy,
          createdAt: quiz.createdAt
        };

      case 'questions_only':
        return {
          questions: quiz.questions.map(q => ({
            id: q.id,
            question: q.question,
            options: q.options
          }))
        };

      case 'full':
      default:
        return quiz;
    }
  }
}

module.exports = QuizService;
